{
  "permissions": {
    "allow": [
      "Bash(vsce ls-publishers:*)",
      "Bash(vsce publish --help:*)",
      "Bash(echo $VSCE_PAT:-\"\"VSCE_PAT not set\"\")",
      "Bash(vsce publish:*)",
      "Bash(npm run package:*)",
      "Bash(vsce package:*)",
      "WebFetch(domain:marketplace.visualstudio.com)",
      "Bash(unzip:*)",
      "Bash(code --list-extensions:*)",
      "Bash(code --uninstall-extension:*)",
      "Bash(code --install-extension:*)",
      "WebFetch(domain:pypi.org)",
      "Bash(git tag:*)",
      "Bash(gh issue create --title \"[Feature] Optional Python source sync for commands (v3.0)\" --body \"$(cat <<''EOF''\n## Feature Request: Optional Python Source File Synchronization\n\n### Problem\n\nUsers who want to maintain Python source files (`.py`) alongside JSON command definitions face manual sync challenges:\n1. Edit Python file â†’ Must manually re-import to update JSON\n2. Edit in VS Code notebook â†’ JSON updates but Python source doesn''t\n3. No automatic conflict detection or resolution\n\nSee [SYNC_STRATEGY.md](docs/vscode-extension/SYNC_STRATEGY.md) for full analysis.\n\n### Proposed Solution (v3.0)\n\nAdd **opt-in** Python source synchronization with file watching and conflict detection.\n\n```bash\n# Link a command to a Python source file\nmcli commands link mycommand --source mycommand.py --watch\n\n# Start file watcher daemon\nmcli commands watch\n\n# Sync manually\nmcli commands sync mycommand\n\n# Unlink source\nmcli commands unlink mycommand\n```\n\n### Workflow\n\n```\nPython File (mycommand.py)\n      â†• auto-sync\nJSON File (~/.mcli/commands/mycommand.json)\n      â†• VS Code extension\nNotebook View (visual editing)\n```\n\nChanges propagate bidirectionally with conflict detection.\n\n### Implementation Requirements\n\n1. **Metadata Storage**\n   ```json\n   {\n     \"name\": \"mycommand\",\n     \"code\": \"...\",\n     \"metadata\": {\n       \"source_file\": \"/path/to/mycommand.py\",\n       \"source_checksum\": \"sha256:...\",\n       \"last_sync\": \"2025-10-28T...\",\n       \"sync_enabled\": true\n     }\n   }\n   ```\n\n2. **File Watcher**\n   - Use `watchdog` library\n   - Monitor linked Python files\n   - On change: compare checksum, re-import if changed\n\n3. **Bidirectional Sync**\n   - Python â†’ JSON: Re-import on file change\n   - JSON â†’ Python: Export on JSON save (via VS Code extension hook)\n\n4. **Conflict Detection**\n   - Track checksums of both files\n   - If both changed: Prompt user to resolve\n   - Options: Keep Python, Keep JSON, Manual merge\n\n5. **VS Code Extension Integration**\n   - On notebook save, trigger export to Python source\n   - Use FSWatcher API or write directly\n\n### Challenges\n\n- **Race Conditions**: File watcher detects change, triggers re-import, which modifies JSON, which triggers another change\n  - **Solution**: Use debouncing and checksum comparison\n  \n- **Circular Updates**: JSON save triggers Python export triggers JSON update\n  - **Solution**: Track operation source, skip if self-triggered\n\n- **Performance**: File watching adds overhead\n  - **Solution**: Make opt-in, only watch linked commands\n\n- **User Experience**: Conflicts are confusing\n  - **Solution**: Clear prompts, good defaults, `--prefer-python` / `--prefer-json` flags\n\n### Phased Implementation\n\n**Phase 1: Basic Linking (v3.0.0)**\n- `mcli commands link` - Store source_file in metadata\n- `mcli commands sync` - Manual sync\n- No auto-watch yet\n\n**Phase 2: File Watching (v3.1.0)**\n- `mcli commands watch` - Auto-sync on Python file changes\n- Daemon mode\n- Basic conflict detection\n\n**Phase 3: VS Code Integration (v3.2.0)**\n- Hook into VS Code extension save event\n- Auto-export notebook edits to Python\n- Full bidirectional sync\n\n### Related\n\n- Issue #100: Export functionality (v2.1) - Prerequisite\n- VS Code Extension v2.0: Already has JSON â†” Notebook conversion\n- See [SYNC_STRATEGY.md](docs/vscode-extension/SYNC_STRATEGY.md) Option 2 & 3\n\n### Priority\n\nLow - Future enhancement for v3.0\nUsers can work around this with export/import for now\n\n### Acceptance Criteria\n\n- [ ] Can link a command to a Python source file\n- [ ] Manual sync updates JSON when Python changes\n- [ ] Manual sync updates Python when JSON changes\n- [ ] Conflict detection warns user when both changed\n- [ ] File watcher auto-syncs Python â†’ JSON\n- [ ] VS Code extension saves trigger Python export\n- [ ] Performance acceptable (no lag on file saves)\n- [ ] Clear UX for conflict resolution\nEOF\n)\" --label \"enhancement,future\")",
      "Bash(gh issue create --title \"[Feature] Optional Python source sync for commands (v3.0)\" --body \"$(cat <<''EOF''\n## Feature Request: Optional Python Source File Synchronization\n\n### Problem\n\nUsers who want to maintain Python source files (`.py`) alongside JSON command definitions face manual sync challenges:\n1. Edit Python file â†’ Must manually re-import to update JSON\n2. Edit in VS Code notebook â†’ JSON updates but Python source doesn''t\n3. No automatic conflict detection or resolution\n\nSee [SYNC_STRATEGY.md](docs/vscode-extension/SYNC_STRATEGY.md) for full analysis.\n\n### Proposed Solution (v3.0)\n\nAdd **opt-in** Python source synchronization with file watching and conflict detection.\n\n```bash\n# Link a command to a Python source file\nmcli commands link mycommand --source mycommand.py --watch\n\n# Start file watcher daemon\nmcli commands watch\n\n# Sync manually\nmcli commands sync mycommand\n\n# Unlink source\nmcli commands unlink mycommand\n```\n\n### Related\n\n- Issue #100: Export functionality (v2.1) - Prerequisite\n- VS Code Extension v2.0: Already has JSON â†” Notebook conversion\n- See [SYNC_STRATEGY.md](docs/vscode-extension/SYNC_STRATEGY.md)\n\n### Priority\n\nLow - Future enhancement for v3.0. See full details in issue body.\nEOF\n)\" --label \"enhancement\")",
      "Bash(gh issue list:*)",
      "Bash(column -t -s '|':*)",
      "Bash(for issue in 54 33 32 31 30 29 28 27 26 25 24 12 11 10 9 8)",
      "Bash(do)",
      "Bash(done)",
      "Bash(for issue in 14 15 16 17 18 19 20 21 22 23)",
      "Bash(do echo \"=== Issue #$issue ===\")",
      "Bash(__NEW_LINE__ gh issue close 44 --comment \"ðŸ”„ **Migrated to Standalone Repository**\n\nThis ML-specific feature has been migrated to the dedicated [politician-trading-tracker](https://github.com/gwicho38/politician-trading-tracker) repository.\n\nAs of commit \\`beb1e68\\` (Oct 29, 2025), all ML functionality was removed from mcli-framework.\n\nIf this issue is still relevant, please re-open it in the new repository:\nhttps://github.com/gwicho38/politician-trading-tracker/issues\")",
      "Bash(python -m pytest:*)",
      "Bash(uv run pytest:*)",
      "Bash(timeout 30 uv run pytest:*)",
      "Bash(npm run build:*)",
      "Bash(npm test:*)",
      "Bash(npm run lint:fix:*)",
      "Bash(git add:*)"
    ],
    "deny": [],
    "ask": []
  }
}
