{
  "permissions": {
    "allow": [
      "Bash(tsc --noEmit)",
      "Bash(tsc:*)",
      "Bash(npm run compile-ts:*)",
      "Bash(node:*)",
      "Bash(npm start:*)",
      "WebFetch(domain:github.com)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(gh issue create:*)",
      "Bash(npm run build:*)",
      "Bash(npm test)",
      "Bash(npm run compile:*)",
      "Bash(gh issue list:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run:*)",
      "Bash(timeout:*)",
      "Bash(bash:*)",
      "Bash(chmod:*)",
      "Bash(./test-install.sh:*)",
      "Read(//Users/lefv/repos/mcli/**)",
      "Bash(make:*)",
      "Bash(dscl:*)",
      "Bash(grep:*)",
      "Bash(OS=\"macos\")",
      "Bash(SERVICE_USER=\"lsh\")",
      "Bash([[ \"$OS\" == \"macos\" ]])",
      "Bash(service_group=\"staff\")",
      "Bash(echo:*)",
      "Bash(dscacheutil:*)",
      "Bash(./lsh:*)",
      "Bash(npm install:*)",
      "Read(//private/tmp/**)",
      "Bash(lsh:*)",
      "Read(//usr/local/bin/**)",
      "Bash(cat:*)",
      "Bash(sudo cp:*)",
      "Bash(sudo kill:*)",
      "Bash(pkill:*)",
      "Bash(kill:*)",
      "Read(//private/var/log/**)",
      "Bash(supabase:*)",
      "Read(//Users/lefv/repos/**)",
      "Bash(./scripts/setup-monitoring-jobs.sh:*)",
      "Bash(sudo lsh:*)",
      "Bash(./scripts/monitoring-jobs/db-health-monitor.sh:*)",
      "Bash(./scripts/monitor-dashboard.sh:*)",
      "Bash(./scripts/monitoring-jobs/politician-trading-monitor.sh:*)",
      "Bash(sudo:*)",
      "Bash(./scripts/daemon-cleanup.sh:*)",
      "Bash(git push:*)",
      "Bash(./scripts/test-live-monitoring.sh:*)",
      "Bash(./scripts/validate-cron-jobs.sh:*)",
      "Bash(crontab:*)",
      "Bash(./scripts/monitoring-jobs/shell-analytics.sh:*)",
      "Read(//usr/local/lib/lsh/**)",
      "Bash(xargs:*)",
      "Bash(./scripts/monitor-status.sh:*)",
      "Bash(awk:*)",
      "Bash(while read job)",
      "Bash(do echo \"Removing $job\")",
      "Bash(done)",
      "Bash(tree:*)",
      "WebSearch",
      "Read(//tmp/**)",
      "Bash(scripts/monitor-status.sh:*)",
      "Bash(scripts/setup-monitoring-jobs.sh:*)",
      "Bash(LSHPATH=./dist ./lsh cron:*)",
      "Bash(NODE_PATH=./dist node dist/cli.js cron reports)",
      "Bash(curl:*)",
      "Bash(git tag:*)",
      "Bash(gh release create:*)",
      "Bash(LSHPATH=./dist ./lsh daemon start:*)",
      "Bash(pip install:*)",
      "Bash(lsof:*)",
      "Bash(export LSH_API_ENABLED=true)",
      "Bash(export LSH_API_PORT=3030)",
      "Bash(LSH_API_ENABLED=true LSH_API_PORT=3030 node dist/daemon/lshd.js start)",
      "Bash(export LSH_API_URL=http://localhost:3030)",
      "Bash(python3:*)",
      "Bash(LSH_API_URL=http://localhost:3030 python3 end_to_end_integration_test.py)",
      "Bash(LSH_API_URL=http://localhost:3030 python3 test_lsh_integration.py)",
      "Bash(python -m pytest --version)",
      "Bash(python -m pytest tests/test_lsh_client.py -v)",
      "Bash(python -m pytest tests/test_lsh_client.py tests/test_data_pipeline.py -v)",
      "Bash(python:*)",
      "Bash(npx jest:*)",
      "Bash(mcli:*)",
      "Bash(mlflow:*)",
      "Bash(dvc:*)",
      "Bash(PYTHONPATH=src python -m pytest tests/test_lsh_client.py tests/test_data_pipeline.py -v --tb=short)",
      "Bash(PYTHONPATH=src python -m pytest tests/test_lsh_client.py tests/test_data_pipeline.py -v)",
      "Bash(PYTHONPATH=/Users/lefv/repos/mcli/src python test_preprocessing.py)",
      "Bash(PYTHONPATH=src python -m mcli.ml.preprocessing.test_preprocessing)",
      "Bash(PYTHONPATH=/Users/lefv/repos/mcli/src python test_models.py)",
      "Bash(PYTHONPATH=src python -m pytest tests/ -v)",
      "Bash(PYTHONPATH=src python -m pytest tests/ --tb=short)",
      "Bash(PYTHONPATH=src python -m pytest tests/ --no-cov -v)",
      "Bash(PYTHONPATH=/Users/lefv/repos/mcli/src python -m pytest test_lsh_client.py -v --tb=short)",
      "Bash(PYTHONPATH=src python src/mcli/ml/preprocessing/test_preprocessing.py)",
      "Bash(PYTHONPATH=src python src/mcli/ml/features/test_feature_engineering.py)",
      "Bash(uv add:*)",
      "Bash(uv sync:*)",
      "Bash(uv run:*)",
      "Bash(uv pip install:*)",
      "Bash(open monitoring-dashboard.html)",
      "Bash(for endpoint in health metrics jobs trades alerts)",
      "Bash(do echo \"=== /api/$endpoint ===\")",
      "Bash(open monitoring-dashboard-v2.html)",
      "Bash(brew install:*)",
      "Bash(brew services start:*)",
      "Bash(open src/cicd/dashboard/index.html)",
      "Bash(open http://localhost:3034/dashboard/workflow.html)",
      "Bash(open /Users/lefv/repos/lsh/dashboard-hub.html)",
      "Bash(MONITORING_API_PORT=3033 node dist/daemon/monitoring-api.js)",
      "Bash(MONITORING_API_PORT=3035 node dist/daemon/monitoring-api.js)",
      "Bash(open /tmp/test-dashboard.html)",
      "Bash(open http://localhost:3034/dashboard/)",
      "Read(//Users/lefv/**)",
      "Bash(open http://localhost:3034/dashboard/job-detail.html?id=job-db-health-monitor)",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(if grep -q \"lsh \" \"$script\")",
      "Bash(then)",
      "Bash(fi)",
      "Bash(do echo \"Testing $endpoint:\")",
      "Bash(sips:*)",
      "Bash(iconutil:*)",
      "Bash(open:*)",
      "Bash(killall:*)",
      "Bash(\"/Users/lefv/Desktop/myAiDashboard.app/Contents/MacOS/myAiDashboard\")",
      "Bash(npm audit:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm test:*)",
      "Bash(npx eslint:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(git log:*)"
    ],
    "deny": [],
    "ask": []
  }
}