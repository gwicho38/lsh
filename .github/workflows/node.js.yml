# Comprehensive CI/CD pipeline with code quality, security, and testing
name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  NODE_VERSION: '20.9.0'

jobs:
  # Code Quality Check
  lint-and-typecheck:
    runs-on: ubuntu-latest
    name: Code Quality & Type Safety

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint
      continue-on-error: true

    - name: Run TypeScript type checking
      run: npm run typecheck

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm run audit:security
      continue-on-error: true

  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    name: Build & Test
    needs: [lint-and-typecheck]

    strategy:
      matrix:
        node-version: [18.x, 20.9.0, 21.x]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build --if-present || tsc

    - name: Build binary if available
      run: npm run build-bin --if-present
      continue-on-error: true

    - name: Run tests with coverage
      run: npm test -- --coverage

    - name: Upload coverage reports
      if: matrix.node-version == '20.9.0'
      uses: codecov/codecov-action@v3
      continue-on-error: true

  # Integration Tests (if services are running)
  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [build-and-test]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build --if-present || tsc

    - name: Run integration tests
      run: npm run test:integration --if-present || echo "No integration tests configured"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
      continue-on-error: true
