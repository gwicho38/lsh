#!/bin/bash
##
# System Cron Setup for LSH Monitoring Jobs
# Adds all monitoring jobs to your system crontab
#
# Usage: ./scripts/setup-system-cron.sh [--install | --remove | --list]
##

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get absolute path to project
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  INFO:${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ SUCCESS:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING:${NC} $1"
}

log_error() {
    echo -e "${RED}‚ùå ERROR:${NC} $1"
}

# Generate cron entries
generate_cron_entries() {
    cat << EOF
# LSH Multi-Database Monitoring Jobs
# Generated by LSH setup script on $(date)

# Database Health Monitor (Every 5 minutes)
*/5 * * * * ${PROJECT_DIR}/scripts/monitoring-jobs/db-health-monitor.sh >> ${PROJECT_DIR}/logs/db-health-monitor.log 2>&1

# Politician Trading Monitor (Every 30 minutes)
*/30 * * * * ${PROJECT_DIR}/scripts/monitoring-jobs/politician-trading-monitor.sh >> ${PROJECT_DIR}/logs/politician-trading-monitor.log 2>&1

# Shell Analytics (Every hour)
0 * * * * ${PROJECT_DIR}/scripts/monitoring-jobs/shell-analytics.sh >> ${PROJECT_DIR}/logs/shell-analytics.log 2>&1

# Data Consistency Check (Every 6 hours)
0 */6 * * * ${PROJECT_DIR}/scripts/monitoring-jobs/data-consistency-check.sh >> ${PROJECT_DIR}/logs/data-consistency-check.log 2>&1

# Performance Monitor (Every 15 minutes)
*/15 * * * * ${PROJECT_DIR}/scripts/monitoring-jobs/performance-monitor.sh >> ${PROJECT_DIR}/logs/performance-monitor.log 2>&1

# Alert Monitor (Every 2 minutes)
*/2 * * * * ${PROJECT_DIR}/scripts/monitoring-jobs/alert-monitor.sh >> ${PROJECT_DIR}/logs/alert-monitor.log 2>&1

# Daily Summary (Every day at 9 AM)
0 9 * * * ${PROJECT_DIR}/scripts/monitoring-jobs/daily-summary.sh >> ${PROJECT_DIR}/logs/daily-summary.log 2>&1

# Log Cleanup (Every day at 2 AM)
0 2 * * * ${PROJECT_DIR}/scripts/monitoring-jobs/log-cleanup.sh >> ${PROJECT_DIR}/logs/log-cleanup.log 2>&1

EOF
}

# Install cron jobs
install_cron_jobs() {
    log_info "Installing LSH monitoring jobs to system cron..."

    # Create logs directory
    mkdir -p "${PROJECT_DIR}/logs"

    # Backup existing crontab
    if crontab -l >/dev/null 2>&1; then
        crontab -l > "${PROJECT_DIR}/logs/crontab-backup-$(date +%Y%m%d-%H%M%S).txt"
        log_info "Backed up existing crontab to logs/crontab-backup-*.txt"
    fi

    # Generate new crontab content
    {
        # Keep existing cron jobs (excluding LSH monitoring jobs)
        if crontab -l 2>/dev/null | grep -v "LSH Multi-Database Monitoring" | grep -v "monitoring-jobs"; then
            :
        fi
        # Add LSH monitoring jobs
        generate_cron_entries
    } | crontab -

    log_success "LSH monitoring jobs installed to system cron"
    log_info "Logs will be written to: ${PROJECT_DIR}/logs/"
    log_info "View active jobs with: crontab -l"
}

# Remove cron jobs
remove_cron_jobs() {
    log_info "Removing LSH monitoring jobs from system cron..."

    if crontab -l >/dev/null 2>&1; then
        # Backup current crontab
        crontab -l > "${PROJECT_DIR}/logs/crontab-backup-before-removal-$(date +%Y%m%d-%H%M%S).txt"

        # Remove LSH monitoring jobs
        crontab -l | grep -v "LSH Multi-Database Monitoring" | grep -v "monitoring-jobs" | crontab -

        log_success "LSH monitoring jobs removed from system cron"
    else
        log_warning "No crontab found"
    fi
}

# List current cron jobs
list_cron_jobs() {
    log_info "Current crontab entries:"
    echo

    if crontab -l >/dev/null 2>&1; then
        crontab -l | grep -E "(LSH|monitoring-jobs)" || log_info "No LSH monitoring jobs found in crontab"
    else
        log_warning "No crontab found"
    fi
    echo
}

# Show usage
show_usage() {
    echo "LSH System Cron Setup"
    echo "===================="
    echo
    echo "Usage: $0 [--install | --remove | --list | --help]"
    echo
    echo "Options:"
    echo "  --install    Install all LSH monitoring jobs to system cron"
    echo "  --remove     Remove all LSH monitoring jobs from system cron"
    echo "  --list       List current LSH monitoring jobs in cron"
    echo "  --help       Show this help message"
    echo
    echo "Jobs that will be installed:"
    echo "  ‚Ä¢ Database Health Monitor    (every 5 minutes)"
    echo "  ‚Ä¢ Politician Trading Monitor (every 30 minutes)"
    echo "  ‚Ä¢ Shell Analytics           (hourly)"
    echo "  ‚Ä¢ Data Consistency Check    (every 6 hours)"
    echo "  ‚Ä¢ Performance Monitor       (every 15 minutes)"
    echo "  ‚Ä¢ Alert Monitor            (every 2 minutes)"
    echo "  ‚Ä¢ Daily Summary            (daily at 9 AM)"
    echo "  ‚Ä¢ Log Cleanup              (daily at 2 AM)"
    echo
    echo "All logs will be saved to: ${PROJECT_DIR}/logs/"
}

# Create manual run script
create_manual_script() {
    log_info "Creating manual monitoring runner..."

    cat > "${PROJECT_DIR}/scripts/run-all-monitoring.sh" << 'EOF'
#!/bin/bash
##
# Run All LSH Monitoring Jobs Manually
# Usage: ./scripts/run-all-monitoring.sh [job-name]
##

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

echo "üîÑ Running LSH Monitoring Jobs"
echo "=============================="
echo

# Create logs directory
mkdir -p "${PROJECT_DIR}/logs"

if [[ "${1:-}" == "" ]]; then
    echo "Running all monitoring jobs..."
    echo

    # Run all jobs
    for job in "${PROJECT_DIR}"/scripts/monitoring-jobs/*.sh; do
        job_name=$(basename "$job" .sh)
        echo "üìä Running: $job_name"

        if "$job" >> "${PROJECT_DIR}/logs/${job_name}-manual.log" 2>&1; then
            echo "   ‚úÖ Completed"
        else
            echo "   ‚ùå Failed (check logs/${job_name}-manual.log)"
        fi
    done

    echo
    echo "üìã View logs in: ${PROJECT_DIR}/logs/"

elif [[ -f "${PROJECT_DIR}/scripts/monitoring-jobs/${1}.sh" ]]; then
    echo "üìä Running single job: $1"
    echo

    if "${PROJECT_DIR}/scripts/monitoring-jobs/${1}.sh"; then
        echo "‚úÖ Job completed successfully"
    else
        echo "‚ùå Job failed"
        exit 1
    fi
else
    echo "‚ùå Job not found: $1"
    echo
    echo "Available jobs:"
    ls "${PROJECT_DIR}/scripts/monitoring-jobs/"*.sh | xargs -n1 basename | sed 's/.sh$//' | sed 's/^/  ‚Ä¢ /'
    exit 1
fi
EOF

    chmod +x "${PROJECT_DIR}/scripts/run-all-monitoring.sh"
    log_success "Created manual runner: scripts/run-all-monitoring.sh"
}

# Main function
main() {
    case "${1:-}" in
        --install)
            install_cron_jobs
            create_manual_script
            ;;
        --remove)
            remove_cron_jobs
            ;;
        --list)
            list_cron_jobs
            ;;
        --help)
            show_usage
            ;;
        *)
            show_usage
            echo
            log_info "Choose an option:"
            echo "  ./scripts/setup-system-cron.sh --install    (Add to system cron)"
            echo "  ./scripts/setup-system-cron.sh --list       (View current jobs)"
            echo "  ./scripts/run-all-monitoring.sh             (Run manually)"
            ;;
    esac
}

main "$@"