@Library('c3') _

import com.c3.infra.ArtifactManager

Integer buildRetentionCount = 10
Integer maxConcurrentBuilds = 5
String REPOMAN_URL = "https://ci-artifacts.c3.ai/v1/helm/"

properties([
      [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: String.valueOf(buildRetentionCount)]],
      [$class: 'ThrottleJobProperty', categories: [], limitOneJobWithMatchingParams: false, maxConcurrentPerNode: 0, maxConcurrentTotal: maxConcurrentBuilds, paramsToUseForLimit: '', throttleEnabled: true, throttleOption: 'project'],
      parameters([
            string(
                  name: 'branch',
                  defaultValue: 'develop',
                  description: 'Branch to build on.'
            ),
            string(
                  name: 'chartName',
                  description: 'Helm chart to publish. No default value, needs to be specified.'
            ),
            string(
                  name: 'NODE_LABEL',
                  defaultValue: 'not-defined',
                  description: 'label of Jenkins worker where pipeline will be build'
            )
      ])
])

timestamps {

   timeout(time: 1, unit: 'HOURS') {

      node(params.NODE_LABEL) {

         def instanceId = sh(script: "curl -s http://169.254.169.254/latest/meta-data/instance-id", returnStdout: true).trim()
         def instanceIP = sh(script: "curl -s http://169.254.169.254/latest/meta-data/local-ipv4", returnStdout: true).trim()
         def instanceAmiId = sh(script: "curl -s http://169.254.169.254/latest/meta-data/ami-id", returnStdout: true).trim()
         echo "Instance:\n    Id  = ${instanceId}\n    IP  = ${instanceIP}\n    AMI = ${instanceAmiId}"

         stage("Check Out c3Server") {
            echo "Checking out c3server repo..."
            sh "mkdir -p c3server"
            dir('c3server') {
               checkout([
                     $class                           : 'GitSCM',
                     branches                         : [[name: params.branch]],
                     doGenerateSubmoduleConfigurations: false,
                     extensions                       : [
                           [$class: 'GitLFSPull'],
                           [$class: 'CloneOption', honorRefspec: true, noTags: true, reference: '', shallow: true, depth: 20, timeout: 30],
                           [$class: 'CheckoutOption', timeout: 20],
                           [$class: 'PruneStaleBranch']
                     ],
                     submoduleCfg                     : [],
                     userRemoteConfigs                : [
                           [credentialsId: 'c3ci', url: 'git@github.com:c3-e/c3server.git']
                     ]
               ])
               sh "git clean -df || true"
            }
            echo "C3 server checked out."
         }

         stage("Release Chart") {
            // Retry packaging several times, as it may fail while downstream charts are being uploaded concurrently.
            int maxRetryCount = 30
            for (int i = 1; i <= maxRetryCount; i++) {
               try {
                   // only add istio flag to cluster pipeline
                   def chartVersion = sh(script: "./c3server/infra/bin/release-chart ${chartName} --repository-url ${ArtifactManager.helmChartRepo()} --build-number ${currentBuild.getNumber()}", returnStdout: true).trim()
                   env.ARTIFACT_VERSION = chartVersion  // expose artifact version to trigger pipeline
                   echo "published chart ${chartName} version is ${chartVersion} in ${ArtifactManager.helmChartRepo()}"
                   break
               } catch (Throwable e) {
                  if (i == maxRetryCount) {
                     echo "Failed to package helm chart."
                     throw e
                  }
                  // Wait a bit for any newly uploaded dependencies to propagate
                  sh "sleep 10"
               }
            }
         }
      }
   }
}
