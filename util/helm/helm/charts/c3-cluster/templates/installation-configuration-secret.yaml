apiVersion: v1
kind: Secret
metadata:
  name: c3-installation-configuration
  labels:
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
type: Opaque
{{- if .Values.c3Cluster.configFramework.installationConfiguration }}
data:
  {{ .Values.c3Cluster.configFramework.installationProjectionFileName }}: {{ .Values.c3Cluster.configFramework.installationConfiguration }}
{{- else if .Values.c3Cluster.configFramework.root }}
stringData:
  {{ .Values.c3Cluster.configFramework.installationProjectionFileName }}: |
    {{- $postgresqlEndpoint := include "c3Cluster.postgresqlServiceName" . -}}
    {{- $bootmanagerConfig := .Values.c3Cluster.configFramework.root -}}
    {{- range list "c3" "secondaryPostgres" "sql" -}}
    {{- $_ := merge $bootmanagerConfig (dict "db" (dict "JdbcStoreConfig" (dict . (dict "credentials" (dict "serverEndpoint" $postgresqlEndpoint))))) -}}
    {{- end -}}
    {{- $clusterConfig := dict "canonicalUrlDomain" (printf "%s.%s" (include "c3Cluster.clusterName" .) .Values.c3Cluster.domain) -}}
    {{- $_ := set $clusterConfig "canonicalUrlScheme" (ternary "https" "http" .Values.c3Cluster.ingress.tls.enabled) -}}
    {{- if not .Values.c3Cluster.ingress.tls.enabled -}}
    {{- $_ := set $clusterConfig "canonicalUrlPortOverride" (coalesce .Values.c3Cluster.canonicalUrlPortOverride 8080) -}}
    {{- end -}}
    {{- $_ := merge $bootmanagerConfig (dict "ClusterConfig" $clusterConfig) -}}
    {{- $bootmanagerConfig | toYaml | nindent 4 }}
{{- else }}
data:
  {{ .Values.c3Cluster.configFramework.installationProjectionFileName }}: 'Cg=='
{{- end }}
